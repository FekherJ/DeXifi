{"mappings":"ICAI,EACA,EACA,E,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SAcJ,SAAS,EAAiB,CAAO,CAAE,EAAO,SAAS,EAC/C,IAAM,EAAe,SAAS,cAAc,CAAC,eAI7C,CAH4B,SAAS,cAAc,CAAC,uBAGhC,SAAS,CAAG,EAChC,EAAa,SAAS,CAAC,MAAM,CAAC,UAE1B,AAAS,YAAT,GACA,EAAa,SAAS,CAAC,GAAG,CAAC,WAC3B,EAAa,SAAS,CAAC,MAAM,CAAC,UACd,UAAT,IACP,EAAa,SAAS,CAAC,GAAG,CAAC,SAC3B,EAAa,SAAS,CAAC,MAAM,CAAC,YAIlC,EAAa,SAAS,CAAC,GAAG,CAAC,QAG3B,WAAW,KAOX,AADqB,SAAS,cAAc,CAAC,gBAChC,SAAS,CAAC,MAAM,CAAC,OAL9B,EAAG,IACP,CAuFA,eAAe,IACX,GAAI,CACA,GAAI,CAAC,EAAiB,CAClB,EAAiB,mDAAoD,SACrE,MACJ,CAEA,IAAM,EAAgB,OAAO,KAAK,CAAC,WAAW,CAAC,MAAM,EAAS,UAAU,CAAC,MAAM,EAAO,UAAU,IAAK,IAAM,OACrG,EAAiB,OAAO,KAAK,CAAC,WAAW,CAAC,MAAM,EAAgB,QAAQ,CAAC,MAAM,EAAO,UAAU,IAAK,IAAM,OAC3G,EAAgB,OAAO,KAAK,CAAC,WAAW,CAAC,MAAM,EAAgB,MAAM,CAAC,MAAM,EAAO,UAAU,IAAK,IAAM,OAExG,EAAa,MAAM,EAAgB,UAAU,GAC7C,EAAc,MAAM,EAAgB,WAAW,GAE/C,EAAgB,EAAW,GAAG,CADd,SAEhB,EAAM,EAAY,MAAM,GACxB,QACC,AAAA,CAAA,EAAc,GAAG,CAAC,KAAO,GAAG,CAAC,GAAe,GAAA,EAAK,OAAO,CAAC,GAAK,IAErE,AAAA,CAAA,EAAA,EAAA,oBAAmB,AAAnB,EAAqB,CAAE,cAAA,EAAe,eAAA,EAAgB,cAAA,EAAe,IAAA,CAAI,EAC7E,CAAE,MAAO,EAAO,CACZ,EAAiB,6BAA+B,EAAM,OAAO,CAAE,QACnE,CACJ,CAtGA,YAAY,UACJ,GAAU,GACV,MAAM,GAGd,EAAG,KAkdH,OAAO,MAAM,CAAG,KACZ,IAAM,EAAS,SAAS,cAAc,CAAC,mBACvC,CAAA,EAAO,KAAK,CAAC,UAAU,CAAG,iDAC1B,EAAO,KAAK,CAAG,GACf,AAlBJ,WACI,IAAM,EAAS,SAAS,cAAc,CAAC,oBACjC,EAAa,EAAO,KAAK,AAG/B,CAAA,SAAS,cAAc,CAAC,sBAAsB,SAAS,CAAG,EAAa,IAGvE,IAAM,EAAiB,AAAC,CAAA,EAAa,EAAO,GAAG,AAAH,EAAQ,CAAA,EAAO,GAAG,CAAG,EAAO,GAAE,AAAF,EAAO,GAC/E,CAAA,EAAO,KAAK,CAAC,UAAU,CAAG,CAAC,kCAAkC,EAAE,EAAe,QAAQ,EAAE,EAAe,EAAE,CAAC,AAC9G,GASA","sources":["<anon>","src/scripts/staking.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $4PPOd = parcelRequire(\"4PPOd\");\nlet $1163c023c066b002$var$provider;\nlet $1163c023c066b002$var$signer;\nlet $1163c023c066b002$var$stakingContract;\nconst $1163c023c066b002$var$sepoliaChainId = 11155111;\nconst $1163c023c066b002$var$localhostChainId = 31337;\n// Contract addresses for different networks\nconst $1163c023c066b002$var$contractAddresses = {\n    //sepolia: '0x56D2caa1B5E42614764a9F1f71D6DbfFd66487a4',\n    localhost: '0x610178dA211FEF7D417bC0e6FeD39F05609AD788' // Replace this address with the actual staking contract address (logged in 1_deploy_staking.js)\n};\n// Function to show notifications at the bottom-right of the screen\nfunction $1163c023c066b002$var$showNotification(message, type = 'success') {\n    const notification = document.getElementById(\"notification\");\n    const notificationMessage = document.getElementById(\"notificationMessage\");\n    // Set the message and type (success or error)\n    notificationMessage.innerText = message;\n    notification.classList.remove(\"hidden\");\n    if (type === 'success') {\n        notification.classList.add(\"success\");\n        notification.classList.remove(\"error\");\n    } else if (type === 'error') {\n        notification.classList.add(\"error\");\n        notification.classList.remove(\"success\");\n    }\n    // Display notification with animation\n    notification.classList.add(\"show\");\n    // Auto-hide after 3 seconds\n    setTimeout(()=>{\n        $1163c023c066b002$var$hideNotification();\n    }, 3000);\n}\nfunction $1163c023c066b002$var$hideNotification() {\n    const notification = document.getElementById(\"notification\");\n    notification.classList.remove(\"show\");\n}\n// Auto-refresh dashboard every 10 seconds\nsetInterval(async ()=>{\n    if ($1163c023c066b002$var$signer && $1163c023c066b002$var$stakingContract) await $1163c023c066b002$var$updateDashboard();\n}, 10000); // Updates every 10 seconds\n// Function to update connection status on the top-right of the screen\nfunction $1163c023c066b002$var$updateConnectionStatus(address = null) {\n    const connectionStatus = document.getElementById(\"connectionStatus\");\n    if (connectionStatus) {\n        if (address) connectionStatus.innerText = `Connected: ${address}`;\n        else connectionStatus.innerText = \"Not connected\";\n    } else console.error(\"Connection status element is missing from the DOM.\");\n}\n// Connect to MetaMask and detect network\nasync function $1163c023c066b002$var$connectWallet() {\n    if (typeof window.ethereum !== 'undefined') try {\n        await window.ethereum.request({\n            method: 'eth_requestAccounts'\n        });\n        $1163c023c066b002$var$provider = new ethers.providers.Web3Provider(window.ethereum);\n        $1163c023c066b002$var$signer = $1163c023c066b002$var$provider.getSigner();\n        const address = await $1163c023c066b002$var$signer.getAddress();\n        $1163c023c066b002$var$updateConnectionStatus(address);\n        const network = await $1163c023c066b002$var$provider.getNetwork();\n        console.log(`Connected to network: ${network.chainId}`);\n        if (network.chainId === $1163c023c066b002$var$sepoliaChainId) await $1163c023c066b002$var$initializeStakingContract($1163c023c066b002$var$contractAddresses.sepolia);\n        else if (network.chainId === $1163c023c066b002$var$localhostChainId) await $1163c023c066b002$var$initializeStakingContract($1163c023c066b002$var$contractAddresses.localhost);\n        else {\n            $1163c023c066b002$var$showNotification('Please switch to Sepolia or Localhost (Hardhat).', 'error');\n            return;\n        }\n        $1163c023c066b002$var$updateDashboard();\n        await $1163c023c066b002$var$updateTransactionHistory();\n    } catch (error) {\n        $1163c023c066b002$var$showNotification('Error connecting wallet: ' + error.message, 'error');\n    }\n    else $1163c023c066b002$var$showNotification('MetaMask not found. Please install it.', 'error');\n}\nasync function $1163c023c066b002$var$initializeStakingContract(contractAddress) {\n    try {\n        const stakingAbiJson = await $1163c023c066b002$var$loadStakingABI();\n        if (!stakingAbiJson) throw new Error('Failed to load ABI JSON.');\n        console.log(\"Extracted ABI:\", stakingAbiJson.abi);\n        const stakingAbi = stakingAbiJson.abi;\n        if (!Array.isArray(stakingAbi)) throw new Error('Loaded ABI is not a valid array.');\n        $1163c023c066b002$var$stakingContract = new ethers.Contract(contractAddress, stakingAbi, $1163c023c066b002$var$signer);\n        console.log(\"Staking contract initialized:\", $1163c023c066b002$var$stakingContract);\n    } catch (error) {\n        console.error('Failed to initialize staking contract:', error);\n        $1163c023c066b002$var$showNotification('Failed to initialize staking contract: ' + error.message, 'error');\n    }\n}\nasync function $1163c023c066b002$var$updateDashboard() {\n    try {\n        if (!$1163c023c066b002$var$stakingContract) {\n            $1163c023c066b002$var$showNotification(\"Please connect the wallet to load contract data.\", \"error\");\n            return;\n        }\n        const walletBalance = ethers.utils.formatUnits(await $1163c023c066b002$var$provider.getBalance(await $1163c023c066b002$var$signer.getAddress()), 18) + \" ETH\";\n        const stakingBalance = ethers.utils.formatUnits(await $1163c023c066b002$var$stakingContract.balances(await $1163c023c066b002$var$signer.getAddress()), 18) + \" STK\";\n        const rewardBalance = ethers.utils.formatUnits(await $1163c023c066b002$var$stakingContract.earned(await $1163c023c066b002$var$signer.getAddress()), 18) + \" RWD\";\n        const rewardRate = await $1163c023c066b002$var$stakingContract.rewardRate();\n        const totalStaked = await $1163c023c066b002$var$stakingContract.totalSupply();\n        const blocksPerYear = 2102400;\n        const yearlyRewards = rewardRate.mul(blocksPerYear);\n        const apy = totalStaked.isZero() ? \"0.00%\" : (yearlyRewards.mul(10000).div(totalStaked) / 100).toFixed(2) + \"%\";\n        (0, $4PPOd.renderReactDashboard)({\n            walletBalance: walletBalance,\n            stakingBalance: stakingBalance,\n            rewardBalance: rewardBalance,\n            apy: apy\n        });\n    } catch (error) {\n        $1163c023c066b002$var$showNotification(\"Error updating dashboard: \" + error.message, \"error\");\n    }\n}\n// Load the ABI for the staking contract\nasync function $1163c023c066b002$var$loadStakingABI() {\n    try {\n        const response = await fetch('./abi/staking_abi.json');\n        if (!response.ok) throw new Error(`Failed to fetch staking ABI: ${response.status} ${response.statusText}`);\n        const abiJson = await response.json();\n        console.log(\"Loaded Staking ABI JSON:\", abiJson); // Log entire JSON object\n        if (!abiJson || !Array.isArray(abiJson.abi)) throw new Error(\"Invalid ABI structure: ABI is not an array.\");\n        return abiJson;\n    } catch (error) {\n        console.error(\"Error loading staking ABI:\", error);\n        $1163c023c066b002$var$showNotification('Failed to load staking ABI: ' + error.message, 'error');\n        return null;\n    }\n}\n// Load the ERC20 ABI for interacting with the staking token\nasync function $1163c023c066b002$var$loadERC20ABI() {\n    try {\n        const response = await fetch('./abi/erc20_abi.json');\n        if (!response.ok) throw new Error(`Failed to fetch ERC20 ABI: ${response.status} ${response.statusText}`);\n        const abi = await response.json();\n        return abi;\n    } catch (error) {\n        $1163c023c066b002$var$showNotification('Failed to load ERC20 ABI: ' + error.message, 'error');\n        return null;\n    }\n}\n// Stake tokens\nasync function $1163c023c066b002$var$stakeTokens() {\n    if (!$1163c023c066b002$var$stakingContract) {\n        console.error(\"Staking contract not defined.\");\n        $1163c023c066b002$var$showNotification(\"Error: stakingContract is undefined. Please connect your wallet.\", \"error\");\n        return;\n    }\n    const amountToStake = document.getElementById(\"stakeAmount\").value.trim();\n    if (!amountToStake || amountToStake === \"0\") {\n        $1163c023c066b002$var$showNotification(\"Please enter a valid amount to stake.\", \"error\");\n        return;\n    }\n    try {\n        const stakeAmountInWei = ethers.utils.parseUnits(amountToStake, 18);\n        // Fetch the staking token address\n        const stakingTokenAddress = await $1163c023c066b002$var$stakingContract.stakingToken();\n        console.log(\"Staking Token Address:\", stakingTokenAddress);\n        // Load the ERC20 ABI\n        const erc20ABIJson = await $1163c023c066b002$var$loadERC20ABI();\n        if (!erc20ABIJson) {\n            $1163c023c066b002$var$showNotification(\"Failed to load ERC20 ABI.\", \"error\");\n            return;\n        }\n        const erc20ABI = erc20ABIJson.abi;\n        // Initialize the token contract\n        const tokenContract = new ethers.Contract(stakingTokenAddress, erc20ABI, $1163c023c066b002$var$signer);\n        console.log(\"ERC20 Token Contract Initialized:\", tokenContract);\n        // Log user balances and staking contract address\n        const userBalance = await tokenContract.balanceOf(await $1163c023c066b002$var$signer.getAddress());\n        console.log(\"User Token Balance:\", ethers.utils.formatUnits(userBalance, 18));\n        console.log(\"Staking Contract Address:\", $1163c023c066b002$var$stakingContract.address);\n        // Check the allowance\n        let allowance = await tokenContract.allowance(await $1163c023c066b002$var$signer.getAddress(), $1163c023c066b002$var$stakingContract.address);\n        console.log(\"Current Allowance:\", ethers.utils.formatUnits(allowance, 18));\n        // Approve staking contract if allowance is insufficient\n        if (allowance.lt(stakeAmountInWei)) try {\n            console.log(\"Testing Approval...\");\n            await tokenContract.callStatic.approve($1163c023c066b002$var$stakingContract.address, stakeAmountInWei);\n            console.log(\"Approve callStatic succeeded.\");\n            console.log(\"Requesting Approval...\");\n            const gasEstimate = await tokenContract.estimateGas.approve($1163c023c066b002$var$stakingContract.address, stakeAmountInWei);\n            console.log(\"Gas Estimate for Approval:\", gasEstimate.toString());\n            const approvalTx = await tokenContract.approve($1163c023c066b002$var$stakingContract.address, stakeAmountInWei, {\n                gasLimit: gasEstimate.add(50000)\n            });\n            console.log(\"Approval Transaction Hash:\", approvalTx.hash);\n            await approvalTx.wait();\n            console.log(\"Approval confirmed.\");\n            // Check updated allowance\n            allowance = await tokenContract.allowance(await $1163c023c066b002$var$signer.getAddress(), $1163c023c066b002$var$stakingContract.address);\n            console.log(\"Updated Allowance:\", ethers.utils.formatUnits(allowance, 18));\n        } catch (error) {\n            console.error(\"Approval failed:\", error.reason || error.message);\n            $1163c023c066b002$var$showNotification(`Approval error: ${error.message}`, \"error\");\n            return;\n        }\n        // Stake tokens\n        const tx = await $1163c023c066b002$var$stakingContract.stake(stakeAmountInWei);\n        await tx.wait();\n        $1163c023c066b002$var$showNotification(`Successfully staked ${amountToStake} tokens!`, \"success\");\n        $1163c023c066b002$var$updateDashboard();\n        await $1163c023c066b002$var$updateTransactionHistory();\n    } catch (error) {\n        console.error(\"Error during staking process:\", error);\n        $1163c023c066b002$var$showNotification(`Error staking tokens: ${error.message}`, \"error\");\n    }\n}\nasync function $1163c023c066b002$var$fetchTransactionHistory() {\n    if (!$1163c023c066b002$var$stakingContract) {\n        console.error('Staking contract not connected.');\n        return [];\n    }\n    const address = await $1163c023c066b002$var$signer.getAddress();\n    console.log(\"Available filters:\", $1163c023c066b002$var$stakingContract.filters);\n    // Fetch events\n    const stakeEvents = await $1163c023c066b002$var$stakingContract.queryFilter($1163c023c066b002$var$stakingContract.filters.Staked(address));\n    const withdrawEvents = await $1163c023c066b002$var$stakingContract.queryFilter($1163c023c066b002$var$stakingContract.filters.Withdrawn(address));\n    const rewardEvents = await $1163c023c066b002$var$stakingContract.queryFilter($1163c023c066b002$var$stakingContract.filters.RewardPaid(address));\n    const history = [\n        ...stakeEvents,\n        ...withdrawEvents,\n        ...rewardEvents\n    ];\n    history.sort((a, b)=>a.blockNumber - b.blockNumber);\n    // Parse data\n    const parsedHistory = await Promise.all(history.map(async (event)=>{\n        const { args: args, event: eventType, blockNumber: blockNumber } = event;\n        if (!args.amount) {\n            console.warn(`Event ${eventType} has no amount field.`);\n            return null; // Skip invalid events\n        }\n        const block = await $1163c023c066b002$var$provider.getBlock(blockNumber);\n        return {\n            type: eventType,\n            amount: ethers.utils.formatUnits(args.amount, 18),\n            timestamp: new Date(block.timestamp * 1000).toLocaleString()\n        };\n    }));\n    return parsedHistory.filter((entry)=>entry !== null); // Remove invalid entries\n}\nasync function $1163c023c066b002$var$updateTransactionHistory() {\n    const tableBody = document.getElementById('transactionHistoryTable');\n    tableBody.innerHTML = ''; // Clear the table\n    const history = await $1163c023c066b002$var$fetchTransactionHistory();\n    history.forEach((entry)=>{\n        const row = document.createElement('tr');\n        let typeIcon = '';\n        // Add icons based on transaction type\n        if (entry.type === 'Staked') typeIcon = \"\\uD83D\\uDCE5\"; // Icon for staking\n        else if (entry.type === 'Withdrawn') typeIcon = \"\\uD83D\\uDCE4\"; // Icon for withdrawal\n        else if (entry.type === 'RewardPaid') typeIcon = \"\\uD83C\\uDF81\"; // Icon for rewards\n        row.innerHTML = `\n            <td class=\"py-2 px-4\">${typeIcon} ${entry.type}</td>\n            <td class=\"py-2 px-4\">${entry.amount} STK</td>\n            <td class=\"py-2 px-4\">${entry.timestamp}</td>\n        `;\n        tableBody.appendChild(row);\n    });\n}\n// Stake LP tokens (uses the same STK token contract)\nasync function $1163c023c066b002$var$stakeLPTokens() {\n    if (!$1163c023c066b002$var$stakingContract) {\n        $1163c023c066b002$var$showNotification('Error: stakingContract is undefined. Please connect your wallet.', 'error');\n        return;\n    }\n    const amountToStake = document.getElementById('lpStakeAmount').value.trim();\n    if (!amountToStake || amountToStake === '0') {\n        $1163c023c066b002$var$showNotification('Please enter a valid amount to stake.', 'error');\n        return;\n    }\n    try {\n        const stakeAmountInWei = ethers.utils.parseUnits(amountToStake, 18);\n        // Reuse the same ERC20 ABI and staking token contract\n        const erc20ABI = await $1163c023c066b002$var$loadERC20ABI();\n        if (!erc20ABI) return;\n        const stakingTokenAddress = await $1163c023c066b002$var$stakingContract.stakingToken();\n        const tokenContract = new ethers.Contract(stakingTokenAddress, erc20ABI, $1163c023c066b002$var$signer);\n        // Check user token balance\n        const balance = await tokenContract.balanceOf(await $1163c023c066b002$var$signer.getAddress());\n        console.log(\"Token Balance:\", ethers.utils.formatUnits(balance, 18));\n        const userBalance = await tokenContract.balanceOf(await $1163c023c066b002$var$signer.getAddress());\n        if (userBalance.lt(stakeAmountInWei)) {\n            $1163c023c066b002$var$showNotification(\"Insufficient tokens for staking.\", 'error');\n            return;\n        }\n        const allowance = await tokenContract.allowance(await $1163c023c066b002$var$signer.getAddress(), $1163c023c066b002$var$stakingContract.address);\n        if (allowance.lt(stakeAmountInWei)) {\n            const approvalTx = await tokenContract.approve($1163c023c066b002$var$stakingContract.address, stakeAmountInWei);\n            await approvalTx.wait();\n            console.log(\"Updated Allowance:\", ethers.utils.formatUnits(await tokenContract.allowance(await $1163c023c066b002$var$signer.getAddress(), $1163c023c066b002$var$stakingContract.address), 18));\n        }\n        const tx = await $1163c023c066b002$var$stakingContract.stakeLP(stakeAmountInWei);\n        await tx.wait();\n        $1163c023c066b002$var$showNotification(`Successfully staked ${amountToStake} LP tokens!`, 'success');\n        $1163c023c066b002$var$updateDashboard();\n        await $1163c023c066b002$var$updateTransactionHistory();\n    } catch (error) {\n        console.error('Error staking LP tokens:', error);\n        $1163c023c066b002$var$showNotification(`Error staking LP tokens: ${error.message}`, 'error');\n    }\n}\n// Withdraw tokens\nasync function $1163c023c066b002$var$withdrawTokens() {\n    const amountToWithdraw = document.getElementById(\"withdrawAmount\").value;\n    if (!amountToWithdraw) {\n        $1163c023c066b002$var$showNotification(\"Please enter an amount to withdraw.\", 'error');\n        return;\n    }\n    try {\n        const parsedAmount = ethers.utils.parseUnits(amountToWithdraw, 18);\n        const tx = await $1163c023c066b002$var$stakingContract.withdraw(parsedAmount);\n        await tx.wait();\n        $1163c023c066b002$var$showNotification('Tokens withdrawn successfully!', 'success');\n        $1163c023c066b002$var$updateDashboard();\n        await $1163c023c066b002$var$updateTransactionHistory();\n    } catch (error) {\n        $1163c023c066b002$var$showNotification(`Error withdrawing tokens: ${error.message}`, 'error');\n    }\n}\n// Function to update the selected reward amount when the slider changes\nfunction $1163c023c066b002$var$updateRewardAmount() {\n    const rewardSlider = document.getElementById('rewardSlider');\n    const selectedReward = document.getElementById('selectedReward');\n    const maxReward = parseFloat(document.getElementById('rewardBalance').innerText.split(' ')[0]);\n    if (!isNaN(maxReward) && maxReward > 0) {\n        rewardSlider.max = maxReward; // Set slider maximum\n        rewardSlider.value = Math.min(rewardSlider.value, maxReward); // Ensure slider value is within bounds\n    } else rewardSlider.value = 0; // Default to 0 if maxReward is invalid\n    // Update the selected reward display\n    selectedReward.innerText = `${rewardSlider.value} RWD`;\n}\n// Update the claim rewards function to use the slider value\nasync function $1163c023c066b002$var$claimRewards() {\n    try {\n        if (!$1163c023c066b002$var$stakingContract) {\n            $1163c023c066b002$var$showNotification('Staking contract not connected. Please connect your wallet.', 'error');\n            return;\n        }\n        // Fetch the user's reward balance\n        const rewardBalance = await $1163c023c066b002$var$stakingContract.earned(await $1163c023c066b002$var$signer.getAddress());\n        if (rewardBalance.isZero()) {\n            $1163c023c066b002$var$showNotification('No rewards available to claim.', 'error');\n            return;\n        }\n        console.log(\"Claiming rewards:\", ethers.utils.formatUnits(rewardBalance, 18), \"RWD\");\n        // Claim all rewards\n        const tx = await $1163c023c066b002$var$stakingContract.getReward();\n        await tx.wait();\n        $1163c023c066b002$var$showNotification(`Successfully claimed ${ethers.utils.formatUnits(rewardBalance, 18)} rewards!`, 'success');\n        // Update the dashboard and transaction history\n        await $1163c023c066b002$var$updateDashboard();\n        await $1163c023c066b002$var$updateTransactionHistory();\n    } catch (error) {\n        console.error('Error claiming rewards:', error);\n        $1163c023c066b002$var$showNotification(`Error claiming rewards: ${error.message}`, 'error');\n    }\n}\nasync function $1163c023c066b002$var$ClaimAllStakingRewards() {\n    try {\n        if (!$1163c023c066b002$var$stakingContract) {\n            $1163c023c066b002$var$showNotification('Staking contract not connected. Please connect your wallet.', 'error');\n            return;\n        }\n        // Claim all rewards from the contract\n        const earned = await $1163c023c066b002$var$stakingContract.earned(await $1163c023c066b002$var$signer.getAddress());\n        if (earned.eq(0)) {\n            $1163c023c066b002$var$showNotification('No rewards available to claim.', 'error');\n            return;\n        }\n        const tx = await $1163c023c066b002$var$stakingContract.getReward();\n        await tx.wait();\n        await tx.wait();\n        $1163c023c066b002$var$showNotification('All rewards claimed successfully!', 'success');\n        // Update dashboard to reflect changes\n        await $1163c023c066b002$var$updateDashboard();\n        await $1163c023c066b002$var$updateTransactionHistory();\n    } catch (error) {\n        console.error('Error claiming all rewards:', error);\n        $1163c023c066b002$var$showNotification(`Error claiming rewards: ${error.message}`, 'error');\n    }\n}\nfunction $1163c023c066b002$var$updateSelectedPercentage() {\n    const slider = document.getElementById('percentageSlider');\n    const percentage = slider.value;\n    // Update the displayed percentage\n    document.getElementById('selectedPercentage').innerText = percentage + \"%\";\n    // Ensure gradient only covers up to the thumb\n    const fillPercentage = (percentage - slider.min) / (slider.max - slider.min) * 100;\n    slider.style.background = `linear-gradient(to right, #00b4d8 ${fillPercentage}%, #ccc ${fillPercentage}%)`;\n}\n// Initialize slider style on load\nwindow.onload = ()=>{\n    const slider = document.getElementById('percentageSlider');\n    slider.style.background = `linear-gradient(to right, #00b4d8 0%, #ccc 0%)`;\n    slider.value = 10;\n    $1163c023c066b002$var$updateSelectedPercentage();\n};\n// Claim LP rewards\nasync function $1163c023c066b002$var$claimLPRewards() {\n    if (!liquidityContract) {\n        $1163c023c066b002$var$showNotification('Error: liquidityContract is undefined. Please connect your wallet.', 'error');\n        return;\n    }\n    try {\n        const rewardAmount = document.getElementById('rewardSlider').value;\n        if (rewardAmount === '0') {\n            $1163c023c066b002$var$showNotification('Please select a valid reward amount to claim.', 'error');\n            return;\n        }\n        const amountInWei = ethers.utils.parseUnits(rewardAmount, 18);\n        const tx = await liquidityContract.claimRewards(amountInWei);\n        await tx.wait();\n        $1163c023c066b002$var$showNotification(`${rewardAmount} RWD claimed successfully!`, 'success');\n        // Refresh slider and dashboard\n        await updateLPDashboard();\n        await $1163c023c066b002$var$updateTransactionHistory();\n        await initializeSlider();\n    } catch (error) {\n        console.error('Error claiming LP rewards:', error);\n        $1163c023c066b002$var$showNotification(`Error claiming LP rewards: ${error.message}`, 'error');\n    }\n}\n\n\n//# sourceMappingURL=index.aecf3a46.js.map\n","let provider;\r\nlet signer;\r\nlet stakingContract;\r\nconst sepoliaChainId = 11155111;\r\nconst localhostChainId = 31337;\r\nimport { renderReactDashboard } from '../components/react-dashboard';\r\n\r\n\r\n// Contract addresses for different networks\r\nconst contractAddresses = {\r\n    //sepolia: '0x56D2caa1B5E42614764a9F1f71D6DbfFd66487a4',\r\n    localhost: '0x610178dA211FEF7D417bC0e6FeD39F05609AD788'    // Replace this address with the actual staking contract address (logged in 1_deploy_staking.js)\r\n    // don't forget to load the abi json :  cp artifacts/contracts/Staking.sol/Staking.json abi/staking_abi.json\r\n};\r\n\r\n// Function to show notifications at the bottom-right of the screen\r\nfunction showNotification(message, type = 'success') {\r\n    const notification = document.getElementById(\"notification\");\r\n    const notificationMessage = document.getElementById(\"notificationMessage\");\r\n\r\n    // Set the message and type (success or error)\r\n    notificationMessage.innerText = message;\r\n    notification.classList.remove(\"hidden\");\r\n    \r\n    if (type === 'success') {\r\n        notification.classList.add(\"success\");\r\n        notification.classList.remove(\"error\");\r\n    } else if (type === 'error') {\r\n        notification.classList.add(\"error\");\r\n        notification.classList.remove(\"success\");\r\n    }\r\n\r\n    // Display notification with animation\r\n    notification.classList.add(\"show\");\r\n\r\n    // Auto-hide after 3 seconds\r\n    setTimeout(() => {\r\n        hideNotification();\r\n    }, 3000);\r\n}\r\n\r\nfunction hideNotification() {\r\n    const notification = document.getElementById(\"notification\");\r\n    notification.classList.remove(\"show\");\r\n}\r\n\r\n// Auto-refresh dashboard every 10 seconds\r\nsetInterval(async () => {\r\n    if (signer && stakingContract) {\r\n        await updateDashboard();\r\n        //await updateTransactionHistory();\r\n    }\r\n}, 10000); // Updates every 10 seconds\r\n\r\n\r\n// Function to update connection status on the top-right of the screen\r\nfunction updateConnectionStatus(address = null) {\r\n    const connectionStatus = document.getElementById(\"connectionStatus\");\r\n    if (connectionStatus) {\r\n        if (address) {\r\n            connectionStatus.innerText = `Connected: ${address}`;\r\n        } else {\r\n            connectionStatus.innerText = \"Not connected\";\r\n        }\r\n    } else {\r\n        console.error(\"Connection status element is missing from the DOM.\");\r\n    }\r\n}\r\n\r\n// Connect to MetaMask and detect network\r\nasync function connectWallet() {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n        try {\r\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            signer = provider.getSigner();\r\n\r\n            const address = await signer.getAddress();\r\n            updateConnectionStatus(address);\r\n\r\n            const network = await provider.getNetwork();\r\n            console.log(`Connected to network: ${network.chainId}`);\r\n\r\n            if (network.chainId === sepoliaChainId) {\r\n                await initializeStakingContract(contractAddresses.sepolia);\r\n            } else if (network.chainId === localhostChainId) {\r\n                await initializeStakingContract(contractAddresses.localhost);\r\n            } else {\r\n                showNotification('Please switch to Sepolia or Localhost (Hardhat).', 'error');\r\n                return;\r\n            }\r\n\r\n            updateDashboard();\r\n            await updateTransactionHistory();\r\n        } catch (error) {\r\n            showNotification('Error connecting wallet: ' + error.message, 'error');\r\n        }\r\n    } else {\r\n        showNotification('MetaMask not found. Please install it.', 'error');\r\n    }\r\n}\r\n\r\nasync function initializeStakingContract(contractAddress) {\r\n    try {\r\n        const stakingAbiJson = await loadStakingABI();\r\n        if (!stakingAbiJson) {\r\n            throw new Error('Failed to load ABI JSON.');\r\n        }\r\n        console.log(\"Extracted ABI:\", stakingAbiJson.abi);\r\n        const stakingAbi = stakingAbiJson.abi;\r\n\r\n        if (!Array.isArray(stakingAbi)) {\r\n            throw new Error('Loaded ABI is not a valid array.');\r\n        }\r\n\r\n        stakingContract = new ethers.Contract(contractAddress, stakingAbi, signer);\r\n        console.log(\"Staking contract initialized:\", stakingContract);\r\n    } catch (error) {\r\n        console.error('Failed to initialize staking contract:', error);\r\n        showNotification('Failed to initialize staking contract: ' + error.message, 'error');\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nasync function updateDashboard() {\r\n    try {\r\n        if (!stakingContract) {\r\n            showNotification(\"Please connect the wallet to load contract data.\", \"error\");\r\n            return;\r\n        }\r\n\r\n        const walletBalance = ethers.utils.formatUnits(await provider.getBalance(await signer.getAddress()), 18) + \" ETH\";\r\n        const stakingBalance = ethers.utils.formatUnits(await stakingContract.balances(await signer.getAddress()), 18) + \" STK\";\r\n        const rewardBalance = ethers.utils.formatUnits(await stakingContract.earned(await signer.getAddress()), 18) + \" RWD\";\r\n\r\n        const rewardRate = await stakingContract.rewardRate();\r\n        const totalStaked = await stakingContract.totalSupply();\r\n        const blocksPerYear = (365 * 24 * 60 * 60) / 15;\r\n        const yearlyRewards = rewardRate.mul(blocksPerYear);\r\n        const apy = totalStaked.isZero()\r\n            ? \"0.00%\"\r\n            : (yearlyRewards.mul(10000).div(totalStaked) / 100).toFixed(2) + \"%\";\r\n\r\n        renderReactDashboard({ walletBalance, stakingBalance, rewardBalance, apy });\r\n    } catch (error) {\r\n        showNotification(\"Error updating dashboard: \" + error.message, \"error\");\r\n    }\r\n}\r\n\r\n\r\n\r\n// Load the ABI for the staking contract\r\nasync function loadStakingABI() {\r\n    try {\r\n        const response = await fetch('./abi/staking_abi.json');\r\n        if (!response.ok) throw new Error(`Failed to fetch staking ABI: ${response.status} ${response.statusText}`);\r\n        const abiJson = await response.json();\r\n        console.log(\"Loaded Staking ABI JSON:\", abiJson); // Log entire JSON object\r\n        if (!abiJson || !Array.isArray(abiJson.abi)) {\r\n            throw new Error(\"Invalid ABI structure: ABI is not an array.\");\r\n        }\r\n        return abiJson;\r\n    } catch (error) {\r\n        console.error(\"Error loading staking ABI:\", error);\r\n        showNotification('Failed to load staking ABI: ' + error.message, 'error');\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n// Load the ERC20 ABI for interacting with the staking token\r\nasync function loadERC20ABI() {\r\n    try {\r\n        const response = await fetch('./abi/erc20_abi.json');\r\n        if (!response.ok) throw new Error(`Failed to fetch ERC20 ABI: ${response.status} ${response.statusText}`);\r\n        const abi = await response.json();\r\n        return abi;\r\n    } catch (error) {\r\n        showNotification('Failed to load ERC20 ABI: ' + error.message, 'error');\r\n        return null;\r\n    }\r\n}\r\n\r\n// Stake tokens\r\nasync function stakeTokens() {\r\n    if (!stakingContract) {\r\n        console.error(\"Staking contract not defined.\");\r\n        showNotification(\"Error: stakingContract is undefined. Please connect your wallet.\", \"error\");\r\n        return;\r\n    }\r\n\r\n    const amountToStake = document.getElementById(\"stakeAmount\").value.trim();\r\n    if (!amountToStake || amountToStake === \"0\") {\r\n        showNotification(\"Please enter a valid amount to stake.\", \"error\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const stakeAmountInWei = ethers.utils.parseUnits(amountToStake, 18);\r\n\r\n        // Fetch the staking token address\r\n        const stakingTokenAddress = await stakingContract.stakingToken();\r\n        console.log(\"Staking Token Address:\", stakingTokenAddress);\r\n\r\n        // Load the ERC20 ABI\r\n        const erc20ABIJson = await loadERC20ABI();\r\n        if (!erc20ABIJson) {\r\n            showNotification(\"Failed to load ERC20 ABI.\", \"error\");\r\n            return;\r\n        }\r\n        const erc20ABI = erc20ABIJson.abi;\r\n\r\n        // Initialize the token contract\r\n        const tokenContract = new ethers.Contract(stakingTokenAddress, erc20ABI, signer);\r\n        console.log(\"ERC20 Token Contract Initialized:\", tokenContract);\r\n\r\n        // Log user balances and staking contract address\r\n        const userBalance = await tokenContract.balanceOf(await signer.getAddress());\r\n        console.log(\"User Token Balance:\", ethers.utils.formatUnits(userBalance, 18));\r\n        console.log(\"Staking Contract Address:\", stakingContract.address);\r\n\r\n        // Check the allowance\r\n        let allowance = await tokenContract.allowance(await signer.getAddress(), stakingContract.address);\r\n        console.log(\"Current Allowance:\", ethers.utils.formatUnits(allowance, 18));\r\n\r\n        // Approve staking contract if allowance is insufficient\r\n        if (allowance.lt(stakeAmountInWei)) {\r\n            try {\r\n                console.log(\"Testing Approval...\");\r\n                await tokenContract.callStatic.approve(stakingContract.address, stakeAmountInWei);\r\n                console.log(\"Approve callStatic succeeded.\");\r\n\r\n                console.log(\"Requesting Approval...\");\r\n                const gasEstimate = await tokenContract.estimateGas.approve(stakingContract.address, stakeAmountInWei);\r\n                console.log(\"Gas Estimate for Approval:\", gasEstimate.toString());\r\n\r\n                const approvalTx = await tokenContract.approve(stakingContract.address, stakeAmountInWei, {\r\n                    gasLimit: gasEstimate.add(50000), // Add buffer to avoid gas underestimation\r\n                });\r\n                console.log(\"Approval Transaction Hash:\", approvalTx.hash);\r\n                await approvalTx.wait();\r\n                console.log(\"Approval confirmed.\");\r\n\r\n                // Check updated allowance\r\n                allowance = await tokenContract.allowance(await signer.getAddress(), stakingContract.address);\r\n                console.log(\"Updated Allowance:\", ethers.utils.formatUnits(allowance, 18));\r\n            } catch (error) {\r\n                console.error(\"Approval failed:\", error.reason || error.message);\r\n                showNotification(`Approval error: ${error.message}`, \"error\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Stake tokens\r\n        const tx = await stakingContract.stake(stakeAmountInWei);\r\n        await tx.wait();\r\n        showNotification(`Successfully staked ${amountToStake} tokens!`, \"success\");\r\n        updateDashboard();\r\n        await updateTransactionHistory();\r\n    } catch (error) {\r\n        console.error(\"Error during staking process:\", error);\r\n        showNotification(`Error staking tokens: ${error.message}`, \"error\");\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync function fetchTransactionHistory() {\r\n    if (!stakingContract) {\r\n        console.error('Staking contract not connected.');\r\n        return [];\r\n    }\r\n\r\n    const address = await signer.getAddress();\r\n    console.log(\"Available filters:\", stakingContract.filters);\r\n\r\n    // Fetch events\r\n    const stakeEvents = await stakingContract.queryFilter(stakingContract.filters.Staked(address));\r\n    const withdrawEvents = await stakingContract.queryFilter(stakingContract.filters.Withdrawn(address));\r\n    const rewardEvents = await stakingContract.queryFilter(stakingContract.filters.RewardPaid(address));\r\n\r\n    const history = [...stakeEvents, ...withdrawEvents, ...rewardEvents];\r\n    history.sort((a, b) => a.blockNumber - b.blockNumber);\r\n\r\n    // Parse data\r\n    const parsedHistory = await Promise.all(\r\n        history.map(async (event) => {\r\n            const { args, event: eventType, blockNumber } = event;\r\n            if (!args.amount) {\r\n                console.warn(`Event ${eventType} has no amount field.`);\r\n                return null; // Skip invalid events\r\n            }\r\n\r\n            const block = await provider.getBlock(blockNumber);\r\n            return {\r\n                type: eventType,\r\n                amount: ethers.utils.formatUnits(args.amount, 18),\r\n                timestamp: new Date(block.timestamp * 1000).toLocaleString(),\r\n            };\r\n        })\r\n    );\r\n\r\n    return parsedHistory.filter((entry) => entry !== null); // Remove invalid entries\r\n}\r\n\r\n\r\n\r\n\r\nasync function updateTransactionHistory() {\r\n    const tableBody = document.getElementById('transactionHistoryTable');\r\n    tableBody.innerHTML = ''; // Clear the table\r\n\r\n    const history = await fetchTransactionHistory();\r\n\r\n    history.forEach((entry) => {\r\n        const row = document.createElement('tr');\r\n        let typeIcon = '';\r\n\r\n        // Add icons based on transaction type\r\n        if (entry.type === 'Staked') {\r\n            typeIcon = '📥'; // Icon for staking\r\n        } else if (entry.type === 'Withdrawn') {\r\n            typeIcon = '📤'; // Icon for withdrawal\r\n        } else if (entry.type === 'RewardPaid') {\r\n            typeIcon = '🎁'; // Icon for rewards\r\n        }\r\n\r\n        row.innerHTML = `\r\n            <td class=\"py-2 px-4\">${typeIcon} ${entry.type}</td>\r\n            <td class=\"py-2 px-4\">${entry.amount} STK</td>\r\n            <td class=\"py-2 px-4\">${entry.timestamp}</td>\r\n        `;\r\n        tableBody.appendChild(row);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Stake LP tokens (uses the same STK token contract)\r\nasync function stakeLPTokens() {\r\n    if (!stakingContract) {\r\n        showNotification('Error: stakingContract is undefined. Please connect your wallet.', 'error');\r\n        return;\r\n    }\r\n\r\n    const amountToStake = document.getElementById('lpStakeAmount').value.trim();\r\n    if (!amountToStake || amountToStake === '0') {\r\n        showNotification('Please enter a valid amount to stake.', 'error');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const stakeAmountInWei = ethers.utils.parseUnits(amountToStake, 18);\r\n\r\n        // Reuse the same ERC20 ABI and staking token contract\r\n        const erc20ABI = await loadERC20ABI();\r\n        if (!erc20ABI) return;\r\n\r\n        const stakingTokenAddress = await stakingContract.stakingToken();\r\n        const tokenContract = new ethers.Contract(stakingTokenAddress, erc20ABI, signer);\r\n\r\n        // Check user token balance\r\n        const balance = await tokenContract.balanceOf(await signer.getAddress());\r\n        console.log(\"Token Balance:\", ethers.utils.formatUnits(balance, 18));\r\n\r\n        const userBalance = await tokenContract.balanceOf(await signer.getAddress());\r\n        if (userBalance.lt(stakeAmountInWei)) {\r\n            showNotification(\"Insufficient tokens for staking.\", 'error');\r\n            return;\r\n        }\r\n\r\n        const allowance = await tokenContract.allowance(await signer.getAddress(), stakingContract.address);\r\n        if (allowance.lt(stakeAmountInWei)) {\r\n            const approvalTx = await tokenContract.approve(stakingContract.address, stakeAmountInWei);\r\n            await approvalTx.wait();\r\n            console.log(\"Updated Allowance:\", ethers.utils.formatUnits(await tokenContract.allowance(await signer.getAddress(), stakingContract.address), 18));\r\n        }\r\n\r\n        const tx = await stakingContract.stakeLP(stakeAmountInWei);\r\n        await tx.wait();\r\n        showNotification(`Successfully staked ${amountToStake} LP tokens!`, 'success');\r\n        updateDashboard();\r\n        await updateTransactionHistory();\r\n    } catch (error) {\r\n        console.error('Error staking LP tokens:', error);\r\n        showNotification(`Error staking LP tokens: ${error.message}`, 'error');\r\n    }\r\n}\r\n\r\n// Withdraw tokens\r\nasync function withdrawTokens() {\r\n    const amountToWithdraw = document.getElementById(\"withdrawAmount\").value;\r\n    if (!amountToWithdraw) {\r\n        showNotification(\"Please enter an amount to withdraw.\", 'error');\r\n        return;\r\n    }\r\n    \r\n    try {\r\n        const parsedAmount = ethers.utils.parseUnits(amountToWithdraw, 18);\r\n        const tx = await stakingContract.withdraw(parsedAmount);\r\n        await tx.wait();\r\n        showNotification('Tokens withdrawn successfully!', 'success');\r\n        updateDashboard();\r\n        await updateTransactionHistory();\r\n    } catch (error) {\r\n        showNotification(`Error withdrawing tokens: ${error.message}`, 'error');\r\n    }\r\n}\r\n\r\n// Function to update the selected reward amount when the slider changes\r\nfunction updateRewardAmount() {\r\n    const rewardSlider = document.getElementById('rewardSlider');\r\n    const selectedReward = document.getElementById('selectedReward');\r\n    const maxReward = parseFloat(document.getElementById('rewardBalance').innerText.split(' ')[0]);\r\n\r\n    if (!isNaN(maxReward) && maxReward > 0) {\r\n        rewardSlider.max = maxReward; // Set slider maximum\r\n        rewardSlider.value = Math.min(rewardSlider.value, maxReward); // Ensure slider value is within bounds\r\n    } else {\r\n        rewardSlider.value = 0; // Default to 0 if maxReward is invalid\r\n    }\r\n\r\n    // Update the selected reward display\r\n    selectedReward.innerText = `${rewardSlider.value} RWD`;\r\n}\r\n\r\n// Update the claim rewards function to use the slider value\r\nasync function claimRewards() {\r\n    try {\r\n        if (!stakingContract) {\r\n            showNotification('Staking contract not connected. Please connect your wallet.', 'error');\r\n            return;\r\n        }\r\n\r\n        // Fetch the user's reward balance\r\n        const rewardBalance = await stakingContract.earned(await signer.getAddress());\r\n        if (rewardBalance.isZero()) {\r\n            showNotification('No rewards available to claim.', 'error');\r\n            return;\r\n        }\r\n\r\n        console.log(\"Claiming rewards:\", ethers.utils.formatUnits(rewardBalance, 18), \"RWD\");\r\n\r\n        // Claim all rewards\r\n        const tx = await stakingContract.getReward();\r\n        await tx.wait();\r\n\r\n        showNotification(`Successfully claimed ${ethers.utils.formatUnits(rewardBalance, 18)} rewards!`, 'success');\r\n\r\n        // Update the dashboard and transaction history\r\n        await updateDashboard();\r\n        await updateTransactionHistory();\r\n    } catch (error) {\r\n        console.error('Error claiming rewards:', error);\r\n        showNotification(`Error claiming rewards: ${error.message}`, 'error');\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function ClaimAllStakingRewards() {\r\n    try {\r\n        if (!stakingContract) {\r\n            showNotification('Staking contract not connected. Please connect your wallet.', 'error');\r\n            return;\r\n        }\r\n\r\n        // Claim all rewards from the contract\r\n        const earned = await stakingContract.earned(await signer.getAddress());\r\n        if (earned.eq(0)) {\r\n            showNotification('No rewards available to claim.', 'error');\r\n            return;\r\n        }\r\n\r\n        const tx = await stakingContract.getReward();\r\n        await tx.wait();\r\n\r\n        await tx.wait();\r\n\r\n        showNotification('All rewards claimed successfully!', 'success');\r\n\r\n        // Update dashboard to reflect changes\r\n        await updateDashboard();\r\n        await updateTransactionHistory();\r\n    } catch (error) {\r\n        console.error('Error claiming all rewards:', error);\r\n        showNotification(`Error claiming rewards: ${error.message}`, 'error');\r\n    }\r\n}\r\n\r\nfunction updateSelectedPercentage() {\r\n    const slider = document.getElementById('percentageSlider');\r\n    const percentage = slider.value;\r\n\r\n    // Update the displayed percentage\r\n    document.getElementById('selectedPercentage').innerText = percentage + \"%\";\r\n\r\n    // Ensure gradient only covers up to the thumb\r\n    const fillPercentage = (percentage - slider.min) / (slider.max - slider.min) * 100;\r\n    slider.style.background = `linear-gradient(to right, #00b4d8 ${fillPercentage}%, #ccc ${fillPercentage}%)`;\r\n}\r\n\r\n\r\n// Initialize slider style on load\r\nwindow.onload = () => {\r\n    const slider = document.getElementById('percentageSlider');\r\n    slider.style.background = `linear-gradient(to right, #00b4d8 0%, #ccc 0%)`;\r\n    slider.value = 10;\r\n    updateSelectedPercentage();\r\n};\r\n\r\n\r\n\r\n// Claim LP rewards\r\nasync function claimLPRewards() {\r\n    if (!liquidityContract) {\r\n        showNotification('Error: liquidityContract is undefined. Please connect your wallet.', 'error');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const rewardAmount = document.getElementById('rewardSlider').value;\r\n        if (rewardAmount === '0') {\r\n            showNotification('Please select a valid reward amount to claim.', 'error');\r\n            return;\r\n        }\r\n\r\n        const amountInWei = ethers.utils.parseUnits(rewardAmount, 18);\r\n        const tx = await liquidityContract.claimRewards(amountInWei);\r\n        await tx.wait();\r\n        showNotification(`${rewardAmount} RWD claimed successfully!`, 'success');\r\n\r\n        // Refresh slider and dashboard\r\n        await updateLPDashboard();\r\n        await updateTransactionHistory();\r\n        await initializeSlider();\r\n    } catch (error) {\r\n        console.error('Error claiming LP rewards:', error);\r\n        showNotification(`Error claiming LP rewards: ${error.message}`, 'error');\r\n    }\r\n}\r\n\r\n"],"names":["$1163c023c066b002$var$provider","$1163c023c066b002$var$signer","$1163c023c066b002$var$stakingContract","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$4PPOd","$1163c023c066b002$var$showNotification","message","type","notification","document","getElementById","notificationMessage","innerText","classList","remove","add","setTimeout","$1163c023c066b002$var$updateDashboard","walletBalance","ethers","utils","formatUnits","getBalance","getAddress","stakingBalance","balances","rewardBalance","earned","rewardRate","totalStaked","totalSupply","yearlyRewards","mul","apy","isZero","div","toFixed","renderReactDashboard","error","setInterval","window","onload","slider","style","background","value","$1163c023c066b002$var$updateSelectedPercentage","percentage","fillPercentage","min","max"],"version":3,"file":"index.aecf3a46.js.map"}